class Solution {
    public int shoppingOffers(
        List<Integer> prices, List<List<Integer>> specials, List<Integer> needs) {
        
        
        Map<List<Integer>, Integer> memo = new HashMap<>();
        return dfs(prices, specials, needs, memo);
    }

    private int dfs(
        List<Integer> prices, List<List<Integer>> specials, List<Integer> needs, 
        Map<List<Integer>, Integer> memo) {
        
        
        if (memo.containsKey(needs)) {
            return memo.get(needs);
        }

       
        int minCost = calculateTotal(prices, needs);

        
        List<Integer> newNeeds = new ArrayList<>();

       
        for (List<Integer> offer : specials) {
            newNeeds.clear();
            boolean validOffer = true;

            
            for (int i = 0; i < needs.size(); ++i) {
                if (offer.get(i) > needs.get(i)) {
                    validOffer = false;
                    break;
                }
                newNeeds.add(needs.get(i) - offer.get(i));
            }

            
            if (validOffer) {
                minCost = Math.min(
                    minCost,
                    offer.get(offer.size() - 1) + dfs(prices, specials, newNeeds, memo)
                );
            }
        }

        
        memo.put(new ArrayList<>(needs), minCost);
        return minCost;
    }

    
    private int calculateTotal(List<Integer> prices, List<Integer> needs) {
        int totalCost = 0;
        for (int i = 0; i < prices.size(); ++i) {
            totalCost += prices.get(i) * needs.get(i);
        }
        return totalCost;
    }
}
